// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Original models
model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String
  imageUrl      String?
  role          String        @default("user")
  passwordHash  String?       // ハッシュ化されたパスワード（オプション）
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastLoginAt   DateTime?
  isActive      Boolean       @default(true)
  settings      Json?
  chatSessions  ChatSession[]
  userSessions  UserSession[]
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model ChatSession {
  id          String    @id @default(uuid())
  userId      String
  title       String
  model       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isArchived  Boolean   @default(false)
  metadata    Json?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@map("chat_sessions")
}

model Message {
  id            String       @id @default(uuid())
  chatSessionId String
  role          String
  content       String
  createdAt     DateTime     @default(now())
  tokensUsed    Int?
  metadata      Json?
  chatSession   ChatSession  @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  attachments   Attachment[]

  @@map("messages")
}

model Attachment {
  id        String   @id @default(uuid())
  messageId String
  fileName  String
  fileType  String
  fileSize  Int
  fileUrl   String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model SystemSetting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model UserSession {
  id             String   @id @default(uuid())
  userId         String
  token          String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  lastActivityAt DateTime @default(now())
  metadata       Json?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
} 